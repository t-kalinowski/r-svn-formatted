The Makefile.in.in here was originally produced by gettextize, but has
since been modified extensively.

If you convert a C file for use with gettext, add it to POTFILES.in and
then run

	make update-po

to recreate R.pot and update the automated `translations'.

Target

	make update-pkg-po

updates the message catalogs for the C and R code in the standard packages,
uses msgmerge --update to update the translations and then re-makes the 
compiled (.mo) files.

To do this for an individual standard package use

	make pkgname.pkg-update

e.g. make grid.pkg-update.


To add a new translation, add the lang.po file to this directory and
add the language to LINGUAS.  Hopefully 'make all R' (in the builddir,
if separate) will do the rest (create ll.gmo and install it as
required).  For fuller manual control, use

	msgfmt -c --statistics -o ll.gmo ll.po

to check and compile the translation, and

	mkdir R_BUILD_DIR/share/locale/ll/LC_MESSAGES
	cp ll.gmo R_BUILD_DIR/share/locale/ll/LC_MESSAGES/R.mo

to install it manually for testing.


Windows RGui translations
=========================

These are contained in RGui.pot, created by running 'make RGui.pot-update'.
It needs manual adjustment in 3 instances of 50%, 75% and 100% which are
not c-format.

Translations should be called RGui-ll.po for language 'll': such a file is
compiled by

	msgfmt -c --statistics -o RGui-ll.gmo RGui-ll.po

To add a translation, add both the .po and .gmo files to the
RGUI-CATALOGS macro in Makefile.in.in: it will then be automatically
distributed.

To test a translation on Windows, use

	cp RGui-ll.gmo ../share/locale/ll/LC_MESSAGES/RGui.mo

and then startup RGui.exe in an appropriate locale, or set LANGUAGE=ll
on the command line.  (All RGui-*.gmo files will installed to the
right places when 'make -f Makefile.win' is run in this directory,
which is part of the main 'make' process.)
