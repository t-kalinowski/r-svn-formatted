                Frequently Asked Questions for R for Windows


This FAQ is for the Windows port of R: it describes features specific to
that version. The main R FAQ can be found at
http://www.ci.tuwien.ac.at/~hornik/R/R-FAQ.html.

There are two versions of R for Windows, but only is under active
development, that described here. It is often called something like rw0900
(although not officially). The information here applies only to
recent versions (rw0642 or later).

There is also information on the use of R for Windows in the Venables
& Ripley `R Complements' at http://www.stats.ox.ac.uk/pub/MASS2.

  ------------------------------------------------------------------------

1. Installation and Usage

     Q1.1. Where can I find the latest version?
     Q1.2. How do I install R for Windows?
     Q1.3. How do I run it?
     Q1.4. How can I manage my work keeping workspaces for different
           projects in different directories?
     Q1.5. How do I print from R?
     Q1.6. Can I use R BATCH?
     Q1.7. Can I use rw0xxx with ESS and emacs?
     Q1.8. What is my HOME directory?

2. Packages

     Q2.1. Can I install packages (libraries) in this version?
     Q2.2. I don't have permission to write to the rw0xxx\library directory.
           Is this fatal?
     Q2.3. The packages I installed do not appear in the HTML help system.
     Q2.4. The functions in the packages I installed are not found by the
           HTML help search system.

3. Windows features

     Q3.1. What should I expect to behave differently from the
           Unix/GNU-Linux version of R?
     Q3.2. I hear about some nifty features: please tell me about them!

4. Workspaces

     Q4.1. My workspace gets saved in a strange place: how do I stop this?
     Q4.2. How do I store my workspace in a different place?
     Q4.3. Can I load workspaces saved under Unix/GNU-Linux?

5. The R Console and Fonts

     Q5.1. I would like to be able to use Japanese fonts in the console and
           to annotate graphs.
     Q5.2. I don't see characters with accents at the R console, for example
           in ?text.
     Q5.3. When using Rgui, the output to the console seems to be delayed.

6. Building from Source

     Q6.1. How can I compile R from source?
     Q6.2. How do I debug code that I have compiled and dyn.load-ed?
     Q6.3  How do I include C++ code?
     Q6.4  The output from my C code disappears. Why?

  ------------------------------------------------------------------------

1) Installation and Usage
=========================

1.1) Where can I find the latest version?

Go to any CRAN site (see http://www.ci.tuwien.ac.at/R/mirrors.html for a
list), navigate to the bin/windows/windows-NT/base directory and collect the
files you need. You will need at least the files

      rw0xxxb.zip rw0xxxh.zip

and will probably want rw0xxxch.zip (the Compiled HTML format help
files) or rw0xxxwh.zip (the Windows help files) or rw0xxxw.zip (the
HTML format help files) . Optionally, you can also download
rw0xxxl.zip (the LaTeX format help files, used for offline printing),
and the installer, rwinst.exe.


1.2) How do I install R for Windows?

First, you need Windows 95 or 98 or NT4: Windows 3.11+win32s will not
work. Your file system must allow long file names (as is likely except
perhaps for some network-mounted systems).

The simplest way is to run the installer (double-click on the icon for
rwinst.exe and navigate its wizard-like pages).  Alternatively, choose
a location and unzip the zip files (with a tool that preserves long
file names and the directory structure: we recommend the INFO-ZIP
project's unzip). All the files will unpack into a directory called
rw0xxx, for some `xxx'.

Choose a working directory for R. Make a shortcut to
rw0xxx\bin\Rgui.exe on your desktop or somewhere on the Start menu
file tree. Right-click the shortcut, select Properties... and change
the `Start in' field to your working directory.

You may also want to add command-line arguments at the end of the
Target field. We use --vsize 10M --nsize 400k. You can also set
environment variables at the end of the Target field, for
example R_LIBS=e:/R/library.


1.3) How do I run it?

Just double-click on the shortcut you prepared at installation.

If you want to set up another project, make a new shortcut or use the
existing one, and change the `Start in' field of the Properties.


1.4) How can I manage my work keeping workspaces for different projects in
different directories?

Create a separate shortcut for each project: see Q1.3. All the paths to
files used by R are relative to the starting directory, so setting the
`Start in' field automatically helps separate projects.


1.5) How do I print from R?

It depends what you want to print.

   * You can print the graphics window from its menu or by using
     dev.print().
   * You can print from the R console or pager by File | Print.
   * You can print help files from the page or HTML browser.
   * If you have configured RHOME\bin\helpPRINT.bat and have latex installed
     you can print help files by help(fn_name, offline=T).


1.6) Can I use R BATCH?

No, but you can set up a batch file using rterm.exe. A sample batch file
might contain (as one line)

path_to_R\bin\rterm.exe --vsize 10M --nsize 300k --no-restore --no-save < %1 > %1.out


1.7) Can I use rw0xxx with ESS and emacs?

Yes. The latest versions of ESS (e.g. 5.1.9) come with support for
this version of R, and rw0650 and later have support for interrupting the
R process from ESS (by C-c C-c).

For help with ESS, please send email to ESS-help@stat.ethz.ch, not the R
mailing lists.


1.8) What are HOME and working directories?

Several places in the documentation use these terms.

The working directory is the directory from which Rgui or Rterm was
launched, unless a shortcut was used when it is given by the `Start
in' field of the shortcut's properties. You can find this from R code
by the call getwd().

The home directory is set as follows (rw0650 on).

If environment variable R_USER is set, its value is used.
Otherwise if environment variable HOME is set, its value is used.
Otherwise if environment variables HOMEDRIVE and HOMEPATH are set,
  the value is ${HOMEDRIVE}${HOMEPATH}.
If all of these fail, the current working directory is used.

You can find this from R code by getenv("R_USER").


2) Packages
===========

2.1) Can I install packages (libraries) in this version?

Yes, of course. The easy way is to see if a pre-compiled binary version of
the package is available: look on CRAN at bin/windows/windows-NT/contrib. If
there is, download the zip file and unpack it in the rw0xxx\library
directory, using unzip or similar, or using the installer rwinst.exe.

If there is not a binary version or that is not up-to-date or you prefer
compiling from source, get rw0xxxsp.zip from the distribution (see Q1.1) and
unpack it in rw0xxx. Then cd src\gnuwin32 and read README.packages. You will
need to collect and install several tools to use this. Once you have done
so, installation is easy: just run `make pkg-pkgname'. To check the package
(run all the examples on its help pages) use `make pkgcheck-pkgname'.


2.2) I don't have permission to write to the rw0xxx\library directory. Is
this fatal?

You can install packages anywhere and use the environment variable R_LIBS to
point to the library location(s). You can also set the R variable `.lib.loc'
in your .Rprofile or when running R.

Suppose your packages are in installed in p:\mylibs. Then you can EITHER

set R_LIBS to p:\mylibs

OR put in the .Rprofile in the working directory or your home directory

      .lib.loc <- c("p:/mylibs", .Library)

OR use a package by, e.g.

      library(MASS, lib.loc="p:/mylibs")

How you set an environment variable is system specific: in Windows 9x
you can set them in autoexec.bat or in an MS-DOS window from which you
launch Rgui / Rterm. Under Windows NT you can use the control panel or
the properties of `My Computer'. You can also set them on the command
line, for example in the shortcut you could have

      path_to_R\bin\rgui.exe --vsize 10M --nsize 300k R_LIBS=e:/R/library

and you can set variables in a file .Renviron in the working directory
or your home directory, for example

      R_LIBS=e:/R/library
      R_VSIZE=10M
      R_NSIZE=400k

The order of search is the command line (flags before variables) then
.Renviron then the inherited environment.

You can also build packages anywhere, but that is much trickier: it is
simpler to install a private copy of R to do the building.


2.3) The packages I installed do not appear in the HTML help system.

HTML help only works for packages installed in rw0xxx\library.

To update the HTML help files after you
have installed a binary package, run at the R prompt.

      > link.html.help()

(The source-code installation does this automatically, and
if you have that installed you can use (preferably)

      cd rw0xxx\src\gnuwin32\help
      make indices

instead.)


2.4) The functions in the packages I installed are not found by the HTML
help search system.

The following conditions need to hold:

   * the package is installed in rw0xxx\library.
   * the package contains a CONTENTS file in top-level directory (a few of
     the binary distributions do not).
   * you updated the indices as described in the answer to Q2.3 after
     installing the package.

If those all hold true, this works for us.


3) Windows Features
===================

3.1) What should I expect to behave differently from the Unix/GNU-Linux
version of R?

   * R commands can be interrupted by Esc in rgui.exe and Ctrl-break in
     rterm.exe: Ctrl-C is used for copying in the GUI version.
   * Command-line editing is always available, but is much simpler than the
     readline-based editing on Unix. For rgui.exe, the menu item `Help |
     Console' will give details.
   * The commands history is saved between sessions only on rgui.exe, and it
     is always saved.
   * Using help.start() does not automatically send help requests to the
     browser: use options(htmlhelp=T) to turn this on.
   * The HTML help system can only access packages installed in the standard
     place.
   * Paths to files (e.g. in source()) can be specified with either "/" or
     "\\".
   * system() is slightly different: see its help page and that of shell().


3.2) I hear about some nifty features: please tell me about them!

You have read the README? There are file menus on the R console, pager
and graphics windows. You can source and save from those menus, and
copy the graphics to gif, postscript or metafile. There are
right-click menus giving shortcuts to menu items, and optionally
toolbars with buttons giving shortcuts to frequent operations.

If you resize the R console the options(width=) is automatically set to the
console width (unless disabled in the configuration file).

The graphics has a history mechanism. As the README says:

  `The History menu allows the recording of plots. When plots have been
  recorded they can be reviewed by PgUp and PgDn, saved and replaced.
  Recording can be turned on automatically (the Recording item on the list) or
  individual plots can be added (Add or the INS key). The whole plot history
  can be saved to or retrieved from an R variable in the global environment.

  There is only one graphics history shared by all the x11 devices.'

The R console and graphics windows have configuration files stored in the
RHOME\etc directory called Rconsole and Rdevga; you can
keep personal copies in your HOME directory. They contain comments which
should suffice for you to edit them to your preferences. For more details
see ?Rconsole.


4) Workspaces
=============

4.1) My workspace gets saved in a strange place: how do I stop this?

Have you changed the working directory?: see Q4.2.


4.2) How do I store my workspace in a different place?

Use the `File | Change Dir' menu item to select a new working
directory: this defaults to the last directory you loaded a file
from. The workspace is saved in the working directory. You can also
save a snapshot of the workspace from the `Save Image' menu item.


4.3) Can I load workspaces saved under Unix/GNU-Linux?

Yes. The converse (saving on Windows, loading on Unix) also works.


5) The R Console and Fonts
==========================

5.1) I would like to be able to use Japanese fonts in the console and to
annotate graphs.

We believe this is possible by setting suitable fonts in the Rconsole and
Rdevga configuration files (see Q3.2). You can specify additional fonts in
Rdevga, and use them by

      par(font=, font.lab=, font.main=, font.sub=)

Nineteen fonts are specified (as 1 to 19) by default: you can add to these
(up to 13 more) or replace them.


5.2) I don't see characters with accents at the R console, for example in
?text.

You need to specify a font in Rconsole (see Q3.2) that supports latin1
encoding. The default, Courier New, does on our systems, as does FixedSys.
This may be a problem in other locales, especially for non-Western European
languages.


5.3) When using Rgui, the output to the console seems to be delayed.

This is deliberate: the console output is buffered and re-written in
chunks to be less distracting. You can turn buffering off or on from
the Misc menu or the right-click menu: Ctrl-W toggles the setting.

If you are sourcing R code or writing from a function, there is another
option. A call to the R function flush.console() will write out the buffer
and so update the console.


6) Building from Source
=======================

6.1) How can I compile R from source?

Get the R sources. Suppose you want to compile R-0.90.0.

      tar zxvf R-0.90.0.tgz
      cd R-0.90.0
      cd src\gnuwin32

Now read the INSTALL file and set up all the tools needed. Then you
can just use `make', sit back and wait. (A complete build takes about
15 minutes on a 300MHz PII with a fast local disc.)

You may need to compile under a case-honouring file system: we found
that a samba-mounted file system (which maps all file names to lower
case) did not work.


6.2) How do I debug code that I have compiled and dyn.load-ed?

First, build a version of the R system with debugging information by

      make clean
      make DEBUG=T

and make a debug version of your package by

      make DEBUG=T pkg-mypkg

Then you can debug by

      gdb /path/to/rw0xxx/bin/Rgui.exe

However, note

   * gdb will only be able to find the source code if we run in the
     location where the source was compiled (rw0xxx/src/gnuwin32 for
     the main system, rw0xxx/src/library/mypkg/src for a package),
     unless told otherwise by the `directory' command. It is most
     convenient to set a list of code locations via `directory'
     commands in the file .gdbinit in the directory from which gdb is
     run.

   * It is only possible to set breakpoints in a DLL after the DLL has
     been loaded. So a way to examine the function `tukeyline' in
     package `eda' might be

           gdb ../../../../bin/Rgui.exe
           (gdb) break WinMain
           (gdb) run
           [ stops with R.dll loaded ]
           (gdb) break R_ReadConsole
           (gdb) continue
           [ stops with console running ]
           (gdb) continue
           Rconsole> library(eda)
           (gdb) break tukeyline
           (gdb) clear R_ReadConsole
           (gdb) continue

     Fortran symbols need an underline appended.

   * Windows has little support for signals, so the usual idea of running a
     program under a debugger and sending it a signal to interrupt it and
     drop control back to the debugger does not work with mingw32
     version of gdb.  It does often work with the cygwin version.

   * We have seen examples in debugging problems with Windows events that
     the cygwin gdb was able to catch but which terminated the mingw32 gdb.


If you have an X server available on the PC, there is a version of DDD
available that runs under the cygwin emulation layer (follow the links at
http://sourceware.cygnus.com/cygwin) and provides a graphical user
interface to gdb.


6.3)  How do I include C++ code?

You need to do two things:

(a) Write a wrapper to export the symbols you want to call from R as
extern "C".

(b) Include the C++ libraries in the link to make the DLL. Suppose
X.cc contains your C++ code, and X_R.cc is the wrapper. Then build the
DLL by (gcc-2.95)

    g++ -c X.cc X_R.cc
    dlltool --export-all-symbols --output-def X.def X_R.o
    dllwrap -o X.dll --def X.def X.o X_R.o -lstdc++

or (VC++)

   cl /MT /c X.cpp X_R.cpp
   link /dll /out:XX.dll /export:X_main X.obj X_R.obj

and call the entry point(s) in X_R.  Construction of static variables
will occur when the DLL is loaded, and destruction when the DLL is
unloaded, usually when R terminates.


6.4)  The output from my C code disappears. Why?

The Rgui.exe console is a Windows application: writing to stdout or
stderr will not produce output in the console. (This will work with
Rterm.exe.)  Use Rprintf instead.


  ------------------------------------------------------------------------
Last edited 13 November 1999 by Brian Ripley <ripley@stats.ox.ac.uk>
