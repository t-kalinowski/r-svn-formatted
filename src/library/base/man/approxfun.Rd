\name{approx[fun]}
\title{Interpolation Functions}
\usage{
approx   (x, y, xout, method="linear", n=50, rule=1, f=0)
approxfun(x, y,       method="linear",       rule=1, f=0)
}
\alias{approx}
\alias{approxfun}
\arguments{
\item{x,y}{vectors giving the coordinates of the points to be interpolated.
  Alternatively a single plotting structure can be specified.}
\item{xout}{an optional set of values specifying where
  interpolation is to take place.}
\item{method}{specifies the interpolation method to be used.
  Choices are "linear" or "constant".}
\item{n}{If \code{xout} is not specified, interpolation
  takes place at \code{n} equally spaced points spanning the interval
  \code{[min(x),max(x)]}.}
\item{rule}{an integer describing how interpolation is to take
  place outside the interval
  \code{[min(x),max(x)]}.
  If \code{rule} is \code{1} then \code{NA}s
  are returned for such points and if it is \code{2},
  the value at the closest data extreme is used.}
\item{f}{For \code{method="constant"} a number between 0 and 1 inclusive,
  indicating a compromise between left- and right-continuous step
  functions. If \code{y0} and \code{y1} are the values to the left and
  right of the point then the value is \code{y0*f+y1*(1-f)} so that
  \code{f=0} is right-continuous and \code{f=1} is left-continuous.} 
}
\value{
\code{approx} returns a list with components \code{x} and \code{y},
containing \code{n} coordinates 
which interpolate the given data points according to the \code{method}
(and \code{rule}) desired.

The function \code{approxfun} returns a function performing (linear or constant)
interpolation of the given data points.  For a given set of \code{x}
values, this function will return the corresponding interpolated
values.  This is often more useful than \code{approx}.
}
\seealso{
\code{\link{spline}} and \code{\link{splinefun}} for spline interpolation.
}
\examples{
x <- 1:10
y <- rnorm(10)
par(mfrow=c(2,1))
plot(x, y, main="approx(.) and approxfun(.)")
points(approx(x, y), col=2, pch='*')
points(approx(x, y, method="constant"), col=4, pch='*')

f <- approxfun(x, y)
curve(f(x), 0, 10, col = 'green')
points(x,y)
is.function(fc <- approxfun(x,y, method="const"))# T
curve(fc(x), 0, 10, col = 'darkblue', add = TRUE)
}
