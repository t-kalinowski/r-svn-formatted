% File src/library/parallel/man/makePSOCKcluster.Rd
% Part of the R package, http://www.R-project.org
% Copyright 2011 R Core Development Team
% Distributed under GPL 2 or later

\name{makeCluster}
\alias{makeCluster}
\alias{makePSOCKcluster}
\alias{makeForkCluster}
\alias{stopCluster}
\title{
  Create a Parallel Socket Cluster
}
\description{
  Creates a set of copies of \R running in parallel and communicating
  over sockets.
}
\usage{
makeCluster(spec, type, ...)
makePSOCKcluster(names, ...)
#ifdef unix
makeForkCluster(nnodes = getOption("mc.cores", 2L), ...)
#endif

stopCluster(cl)
}
\arguments{
  \item{spec}{A specification appropriate to the type of cluster.}
  \item{names}{Either a character vector of host names on whch to run
    the worker copies on \R, or a non-negative integer (in which case
    that number of copies is run on \samp{localhost}).}
#ifdef unix
  \item{nnodes}{The number of nodes.}
#endif
  \item{type}{One of the supported types: see \sQuote{Details}.}
  \item{\dots}{Options to be passed to the function spawning the workers.
    See \sQuote{details}.}
  \item{cl}{an object of class \code{"cluster"}.}
}
\details{
  \code{makeCluster} creates a cluster of one of the supported types.
  The default type, \code{"PSOCK"}, calls \code{makePSOCKcluster}.  Type
  \code{"FORK"} (not available on Windows) calls
  \code{makeForkCluster}.  Other types are passed to package \pkg{snow}.
  
  \code{makePSOCKcluster} is very similar to \code{makeSOCKcluster} in
  package \pkg{snow}.  It runs \command{Rscript} on the specified
  host(s) to set up a worker process which listens on a socket for
  expressions to evaluate, and returns the results (as serialized
  objects).

  The workers are most often running on the same host as the master,
  when no options need be set.

  Several options are supported:
  \describe{
    \item{\code{master}}{The host name of the master.}
    \item{\code{port}}{The port number for the socket connection,
      default taken from the environment variable \env{R_PARALLEL_PORT},
      then \code{10187}.}
    \item{\code{timeout}}{The timeout in seconds for that port.  Default
      1 year.}
    \item{\code{outfile}}{Where to send the stdout and stderr from the
      workers. \code{""} indicates no redirection (which may only be
      useful for local workers).
      Defaults to \file{/dev/null} (\file{nul:} on Windows).
      Other files will be opened in append mode, as all workers log to the
      same file.} 
    \item{\code{homogeneous}}{Logical.  Are all the hosts running
      identical setups, so \command{Rscript} can be launched using its
      full path on the master?  Otherwise it has to be in the default
      path on the other hosts.}
    \item{\code{rscript}}{The path to \command{Rscript} on the workers.
      Defaults to the full path on the master.}
    \item{\code{rshcmd}}{The command to be run on the master to launch a
      process on another host.  Defaults to \command{ssh}.}
    \item{\code{user}}{The user name to be used when communicating with
      another host.}
    \item{\code{manual}}{Logical.  If true the workers will need to be
      run manually.}
  }

  Function \code{makeForkCluster} creates a socket cluster by forking
  (and hence is not available on Windows).  It supports options
  \code{port}, \code{timeout} and \code{outfile}.
  
  It is good practice to shutdown the workers by calling
  \code{\link{stopCluster}}: however the workers will terminate
  themselves once the socket on which they are listening for commands
  becomes unavailable, which it should if the master \R session is
  completed (or its process dies).
}
\value{
  An object of class \code{c("SOCKcluster", "cluster")}.
}

\seealso{
  \code{\link{stopCluster}}.
}
