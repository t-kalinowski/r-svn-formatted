
R : Copyright 2000, The R Development Core Team
Version 0.99.0 Under development (unstable) (February 4, 2000)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type	"?license" or "?licence" for distribution details.

R is a collaborative project with many contributors.
Type	"?contributors" for a list.

Type	"demo()" for some demos, "help()" for on-line help, or
    	"help.start()" for a HTML browser interface to help.
Type	"q()" to quit R.

> ####	d|ensity
> ####	p|robability (cumulative)
> ####	q|uantile
> ####	r|andom number generation
> ####
> ####	Functions for  ``d/p/q/r''
> 
> ###-- these are identical in ./arith-true.R ["fixme": use source(..)]
> opt.conformance <- 0
> Meps <- .Machine $ double.eps
> options(rErr.eps = 1e-30)
> rErr <- function(approx, true, eps = .Options$rErr.eps)
+ {
+     if(is.null(eps)) { eps <- 1e-30; options(rErr.eps = eps) }
+     ifelse(Mod(true) >= eps,
+ 	   1 - approx / true, # relative error
+ 	   true - approx)     # absolute error (e.g. when true=0)
+ }
> ## Short cut:
> All.eq <- function(x,y) all.equal.numeric(x,y, tolerance = 1e-14)
> 
> if(!interactive())
+     .Random.seed <- c(0,rep(7654, 3))
> 
> ###--- Discrete Distributions: Simple Consistency Checks  pZZ = cumsum(dZZ)
> 
> ## Currently, just Wilcoxon  [should do this for all !]
> is.sym <- TRUE
> for(n in rpois(5, lam=6))
+     for(m in rpois(15, lam=8))
+     {
+         x <- -1:(n*m + 1)
+         fx <- dwilcox(x, n, m)
+         Fx <- pwilcox(x, n, m)
+         is.sym <- is.sym & all(fx == dwilcox(x, m, n))
+         eq <- All.eq(Fx, cumsum(fx))
+         if(!is.logical(eq) || !eq) print(eq)
+     }
> is.sym
[1] TRUE
> 
> ##--- Cumulative Poisson '==' Cumulative Chi^2 :
> ##--- Abramowitz & Stegun, p.941 :  26.4.21 (26.4.2)
> n1 <- 20; n2 <- 16
> for(lambda in rexp(n1))
+     for(k in rpois(n2, lambda)) {
+ 	tst <- all.equal(1 - pchisq(2*lambda, 2*(k+1)),
+ 			 pp <- sum(dpois(0:k, lambda=lambda)), tol = 100*Meps)
+ 	if(!(is.logical(tst) && tst))
+ 	    cat("lambda=", format(lambda),".  k =",k, " --> tst=", tst,"\n")
+ 	tst2 <- all.equal(pp, ppois(k, lambda=lambda), tol = 100*Meps)
+ 	if(!(is.logical(tst2) && tst2))
+ 	    cat("lambda=", format(lambda),".  k =",k, " --> tst2=", tst2,"\n")
+ 	tst3 <- all.equal(1 - pp, ppois(k, lambda=lambda, lower.tail=FALSE))
+ 	if(!(is.logical(tst3) && tst3))
+ 	    cat("lambda=", format(lambda),".  k =",k, " --> tst3=", tst3,"\n")
+     }
> 
> ##--- Cumulative Binomial '==' Cumulative F :
> ##--- Abramowitz & Stegun, p.945-6;  26.5.24  AND  26.5.28 :
> n0 <- 50; n1 <- 16; n2 <- 20; n3 <- 8
> for(n in rbinom(n1, size = 2*n0, p = .4)) {
+     cat("n=",n,": ")
+     for(p in c(0,1,rbeta(n2, 2,4))) {
+ 	cat(".")
+ 	for(k in rbinom(n3, size = n,  prob = runif(1))) {
+ 	    ## For X ~ Bin(n,p), compute 1 - P[X > k] = P[X <= k]  in two ways:
+ 	    tst <- all.equal(if(k==n || p==0) 1 else
+ 			     pf((k+1)/(n-k)*(1-p)/p, df1=2*(n-k), df2=2*(k+1)),
+ 			     sum(dbinom(0:k, size = n, prob = p)))
+ 	    if(!(is.logical(tst) && tst))
+ 		cat("n=", n,"; p =",format(p),".  k =",k, " --> tst=",tst,"\n")
+ 	}
+     }
+     cat("\n")
+ }
n= 33 : ......................
n= 32 : ......................
n= 33 : ......................
n= 44 : ......................
n= 39 : ......................
n= 44 : ......................
n= 41 : ......................
n= 46 : ......................
n= 30 : ......................
n= 43 : ......................
n= 44 : ......................
n= 33 : ......................
n= 37 : ......................
n= 39 : ......................
n= 37 : ......................
n= 50 : ......................
> 
> ##---  Gamma (incl. chi^2) Density :
> x <- round(rgamma(100, shape = 2),2)
> for(sh in round(rlnorm(30),2)) {
+     Ga <- gamma(sh)
+     for(sig in round(rlnorm(30),2)) {
+         tst <- all.equal((d1 <- dgamma(  x,   shape = sh, scale = sig)),
+                          (d2 <- dgamma(x/sig, shape = sh, scale = 1) / sig),
+                          tol = 1e-15)
+         if(!(is.logical(tst) && tst))
+             cat("ERROR: dgamma() doesn't scale:",tst,"\n",
+                 "  x =", formatC(x),"\n  shape,scale=",formatC(c(sh, sig)),"\n")
+         tst <- All.eq(d1, (d3 <- 1/(Ga * sig^sh) * x^(sh-1) * exp(-x/sig)))
+         if(!(is.logical(tst) && tst))
+             cat("NOT Equal:",tst,"\n x =", formatC(x),
+                 "\n  shape,scale=",formatC(c(sh, sig)),"\n")
+     }
+ }
> 
> ##--- Normal (& Lognormal) :
> 
> ## 2 Ex. from  Wichura (1988); AS 241 Applied Statistics -- would be better
> all.equal(qnorm(0.25),-0.6744897501960817, tol = 1e-14)
[1] TRUE
> all.equal(qnorm(0.001),-3.090232306168, tol = 1e-12)
[1] TRUE
> 
> z <- rnorm(1000); all.equal(pnorm(z),  1 - pnorm(-z), tol= 1e-15)
[1] TRUE
> z <- c(-Inf,Inf,NA,NaN, rt(1000, df=2))
> zsml <- z > -37.5 || !is.finite(z)
> for(df in 1:10) if(!is.logical(all.equal(pt(z, df), 1 - pt(-z,df), tol= 1e-15)))
+     cat("ERROR -- df = ", df, "\n")
> All.eq(pz <- pnorm(z), 1 - pnorm(z, lower=FALSE))
[1] TRUE
> All.eq(pz,               pnorm(-z, lower=FALSE))
[1] TRUE
> All.eq(log(pz[zsml]),  pnorm(z[zsml], log=TRUE))
[1] TRUE
> y <- seq(-70,0, by = 10)
> cbind(y, "log(pnorm(y))"= log(pnorm(y)), "pnorm(y, log=T)"= pnorm(y, log=TRUE))
       y log(pnorm(y)) pnorm(y, log=T)
[1,] -70          -Inf   -2455.1672298
[2,] -60          -Inf   -1805.0130056
[3,] -50          -Inf   -1254.8305621
[4,] -40          -Inf    -804.6084420
[5,] -30  -454.3212440    -454.3212440
[6,] -20  -203.9171554    -203.9171554
[7,] -10   -53.2312852     -53.2312852
[8,]   0    -0.6931472      -0.6931472
> 
> All.eq(pz, plnorm(exp(z)))
[1] TRUE
> 
> ###==========  p <-> q  Inversion consistency =====================
> ok <- 1e-5 < pz & pz < 1 - 1e-5
> all.equal(z[ok], qnorm(pz[ok]), tol= 1e-12)
[1] TRUE
> 
> ## The prefixes of ALL the PDQ & R functions
> PDQR <- c("beta", "binom", "cauchy", "chisq", "exp", "f",
+           "gamma", "geom", "hyper", "lnorm", "logis", "nbinom","norm",
+           "pois","signrank","t","unif","weibull","wilcox")
> PQonly <- c("tukey")
> 
> 
> ###===== Random numbers -- first, just output:
> 
> .Random.seed <- c(0, 17292, 29447, 24113)
> n <- 20
> ## for(pre in PDQR) { n <- paste("r",pre,sep=""); cat(n,": "); str(get(n))}
> (Rbeta    <- rbeta    (n, shape1 = .8, shape2 = 2) )
 [1] 0.0009459396 0.0749569119 0.7969897349 0.1173196499 0.2400710007
 [6] 0.1318767829 0.8277537923 0.0359498142 0.2403329282 0.0372784791
[11] 0.3759311413 0.3581043996 0.2895229973 0.6005864534 0.1833902168
[16] 0.1198140580 0.0706071423 0.0308280998 0.3591918485 0.4281862391
> (Rbinom   <- rbinom   (n, size = 55, prob = .25) )
 [1] 15 13 14 16 20  8  7 15 16 12 20 15 17  7  7 16 13 15 19  9
> (Rcauchy  <- rcauchy  (n, location = 12, scale = 2) )
 [1] 34.263018 12.540399 16.802259 11.789490 14.154479 10.462895 12.540308
 [8] 12.876666 12.537513 11.977077 11.807015 12.481572 11.954381 10.884467
[15]  9.516357 12.935321 10.946190 14.864709  7.898369 12.782296
> (Rchisq   <- rchisq   (n, df = 3) )
 [1] 4.1802057 2.2410473 8.3668743 0.7165071 4.6012338 0.7650135 2.1202187
 [8] 0.2898359 0.7288776 2.9159575 3.6549180 0.5587417 4.9140095 7.3809424
[15] 5.6769453 4.9920360 0.6435048 1.1676611 3.5323618 1.6709330
> (Rexp     <- rexp     (n, rate = 2) )
 [1] 0.07333367 2.13910864 1.32756654 0.11396374 0.07688834 1.38460882
 [7] 0.55605730 0.34815444 0.72538091 0.76093410 0.51832937 0.94396435
[13] 0.11381630 0.65756405 0.29282882 0.04916325 0.18753254 0.76833277
[19] 1.01917017 2.40313307
> (Rf       <- rf       (n, df1 = 12, df2 = 6) )
 [1] 1.0482995 7.1506346 0.6029385 2.0461847 1.1851525 4.3366766 0.9365564
 [8] 1.2584864 0.4850872 1.4162343 1.3338440 1.1810704 0.7064808 0.5176781
[15] 2.1632007 2.9753123 1.2178294 1.7130207 0.5469131 0.1313706
> (Rgamma   <- rgamma   (n, shape = 2, scale = 5) )
 [1]  3.9092623 21.6048906 11.5498513 11.1312817  4.6122029 14.6707798
 [7]  0.9007555 18.9112724  9.4168271 30.4501082  4.5755714  3.2193519
[13] 24.5309039  5.2340905 14.5772699  1.0665363 11.3585753  8.7876520
[19]  8.0414810 14.5654162
> (Rgeom    <- rgeom    (n, prob = .25) )
 [1]  3  1  4  0  8  0  0  1  0 18  0  4  1  2  1  0  2  0  2  2
> (Rhyper   <- rhyper   (n, m = 40, n = 30, k = 20) )
 [1] 12 11  8 12 14 13  9 11 12 12  6 11 10 11 13  9 12 11 12 14
> (Rlnorm   <- rlnorm   (n, meanlog = -1, sdlog = 3) )
 [1] 3.723157e-02 6.729236e-02 1.796710e-01 1.369162e-02 2.118996e-01
 [6] 1.308724e+02 6.550988e-02 5.618367e-01 2.458422e-03 7.853920e-02
[11] 2.210483e-01 1.713584e-01 2.116665e+00 8.205068e+01 3.111700e+00
[16] 1.883586e+00 4.389370e+00 7.965253e-04 3.287647e-01 4.398008e-01
> (Rlogis   <- rlogis   (n, location = 12, scale = 2) )
 [1] 11.958471 14.548885  6.576416 19.911550 12.973180 12.613138  8.732242
 [8] 14.189465  5.945761 19.020605  8.235806 12.741034 11.836701 11.254931
[15] 16.598197  8.433152  6.371237 12.354177 11.048916  9.450912
> (Rnbinom  <- rnbinom  (n, size = 7, prob = .01) )
 [1] 1015  510  648 1042  648  668  724  609 1052  404  660  381  321  839  901
[16]  292  572  684  883 1133
> (Rnorm    <- rnorm    (n, mean = -1, sd = 3) )
 [1] -2.54569120 -1.57647929  2.23763164 -6.93419332 -4.33277072 -4.07890815
 [7]  0.09189597 -4.67789974  0.35869871  1.66620146 -0.61029370  2.35074871
[13]  2.49862518  0.28586195  1.56824133  4.02175812 -3.40412993 -2.65797756
[19] -0.49471250 -1.78043063
> (Rpois    <- rpois    (n, lambda = 12) )
 [1] 12 18 14 13 13 17 15 14 14 13 11 14 13  7 12  9 19  8  9 12
> (Rsignrank<- rsignrank(n, n = 47) )
 [1] 622 434 637 504 548 420 768 474 513 579 422 578 695 579 712 615 405 509 557
[20] 726
> (Rt       <- rt       (n, df = 11) )
 [1] -1.3610791  1.0285766  0.4906423  0.5436631  1.4498561 -0.1466881
 [7] -1.3015740  2.6307208 -0.4580728  1.7239561 -0.3211763  0.2335814
[13] -1.4966515  1.4489952 -0.7260506 -0.5218425  1.6233486 -1.0741395
[19]  0.1892576 -0.0894065
> (Runif    <- runif    (n, min = .2, max = 2) )
 [1] 0.4819869 0.8691635 1.7207810 0.8775278 1.8881191 1.5369569 0.5381994
 [8] 1.4163852 1.2217887 1.3941949 1.5080723 0.4361526 1.5304106 1.4255205
[15] 0.3615949 1.1561823 0.6312970 0.7930476 0.4371050 1.0308476
> (Rweibull <- rweibull (n, shape = 3, scale = 2) )
 [1] 2.5737821 2.1762468 1.0984740 0.9032148 2.4753765 2.1901052 2.4219361
 [8] 1.3065670 2.9453794 1.7157994 2.6296327 1.8076976 0.4251307 2.1552553
[15] 1.5197037 1.5213791 1.5686355 1.3737624 1.7751696 1.0927827
> (Rwilcox  <- rwilcox  (n, m = 13, n = 17) )
 [1] 143 110 105 110 100 147 127 100  90  71  85  99 139 123 153 114  56 110  85
[20] 106
> 
> (Pbeta    <- pbeta    (Rbeta, shape1 = .8, shape2 = 2) )
 [1] 0.00685142 0.21898139 0.96943981 0.30726448 0.51350239 0.33510112
 [7] 0.97810553 0.12383254 0.51388356 0.12740407 0.68542852 0.66557175
[13] 0.58183279 0.87756637 0.42564683 0.31211434 0.20917242 0.10975854
[19] 0.66680467 0.73943522
> (Pbinom   <- pbinom   (Rbinom, size = 55, prob = .25) )
 [1] 0.71320192 0.47942518 0.60175022 0.80607834 0.97898900 0.04539900
 [7] 0.02045925 0.71320192 0.80607834 0.35710014 0.97898900 0.71320192
[13] 0.87710148 0.02045925 0.02045925 0.80607834 0.47942518 0.71320192
[19] 0.95952340 0.08881263
> (Pcauchy  <- pcauchy  (Rcauchy, location = 12, scale = 2) )
 [1] 0.9714812 0.5840012 0.8743873 0.4666191 0.7618305 0.2914213 0.5839878
 [8] 0.6314968 0.5835731 0.4963519 0.4693803 0.5752128 0.4927407 0.3380482
[15] 0.2157967 0.6392424 0.3456390 0.8059952 0.1444131 0.6186825
> (Pchisq   <- pchisq   (Rchisq, df = 3) )
 [1] 0.75734885 0.47609135 0.96099212 0.13068538 0.79656374 0.14218428
 [7] 0.45216677 0.03807139 0.13360847 0.59523480 0.69878142 0.09419094
[13] 0.82179683 0.93930223 0.87156985 0.82761876 0.11359536 0.23922949
[19] 0.68341090 0.35658474
> (Pexp     <- pexp     (Rexp, rate = 2) )
 [1] 0.13641880 0.98613264 0.92971052 0.20381800 0.14253652 0.93728895
 [7] 0.67113719 0.50157835 0.76560834 0.78169633 0.64536236 0.84861495
[13] 0.20358320 0.73156007 0.44326040 0.09364707 0.31275544 0.78490286
[19] 0.86975531 0.99182166
> (Pf       <- pf       (Rf, df1 = 12, df2 = 6) )
 [1] 0.493968892 0.987819917 0.214465434 0.804851021 0.560142915 0.958476676
 [7] 0.432468011 0.591675896 0.134821391 0.651135448 0.621437022 0.558309651
[13] 0.285976592 0.156229064 0.823256086 0.904828024 0.574518093 0.737314198
[19] 0.175931308 0.001535476
> (Pgamma   <- pgamma   (Rgamma, shape = 2, scale = 5) )
 [1] 0.18469983 0.92930080 0.67143844 0.65178456 0.23573834 0.79079896
 [7] 0.01440388 0.89110187 0.56150517 0.98393855 0.23305255 0.13654797
[13] 0.95629013 0.28145838 0.78786294 0.01975953 0.66257119 0.52440798
[19] 0.47774483 0.78748817
> (Pgeom    <- pgeom    (Rgeom, prob = .25) )
 [1] 0.6835938 0.4375000 0.7626953 0.2500000 0.9249153 0.2500000 0.2500000
 [8] 0.4375000 0.2500000 0.9957717 0.2500000 0.7626953 0.4375000 0.5781250
[15] 0.4375000 0.2500000 0.5781250 0.2500000 0.5781250 0.5781250
> (Phyper   <- phyper   (Rhyper, m = 40, n = 30, k = 20) )
 [1] 0.714948834 0.512956590 0.059049984 0.714948834 0.951394605 0.866274128
 [7] 0.151320820 0.512956590 0.714948834 0.714948834 0.004168396 0.512956590
[13] 0.308642596 0.512956590 0.866274128 0.151320820 0.714948834 0.512956590
[19] 0.714948834 0.951394605
> (Plnorm   <- plnorm   (Rlnorm, meanlog = -1, sdlog = 3) )
 [1] 0.22257288 0.28561661 0.40560090 0.13632280 0.42705342 0.97488935
 [7] 0.28258316 0.55612505 0.04751789 0.30337465 0.43258714 0.39949055
[13] 0.72014780 0.96426235 0.76168186 0.70691429 0.79571003 0.02042329
[19] 0.48505472 0.52373190
> (Plogis   <- plogis   (Rlogis, location = 12, scale = 2) )
 [1] 0.49480904 0.78150228 0.06228112 0.98121578 0.61930285 0.57604752
 [7] 0.16329967 0.74927184 0.04621564 0.97097949 0.13214820 0.59158387
[13] 0.47959901 0.40792878 0.90880234 0.14388087 0.05655197 0.54415680
[19] 0.38330532 0.21848042
> (Pnbinom  <- pnbinom  (Rnbinom, size = 7, prob = .01) )
 [1] 0.88435148 0.26244111 0.48176825 0.89901188 0.48176825 0.51299455
 [7] 0.59632006 0.41950678 0.90402573 0.12140233 0.50057859 0.09750529
[13] 0.04876502 0.74086686 0.80178090 0.03225449 0.35983768 0.53748456
[19] 0.78532898 0.93731909
> (Pnorm    <- pnorm    (Rnorm, mean = -1, sd = 3) )
 [1] 0.30319601 0.42380853 0.85975306 0.02396072 0.13330062 0.15237446
 [7] 0.64205805 0.11010563 0.67468947 0.81292692 0.55167806 0.86798493
[13] 0.87823490 0.66590034 0.80402336 0.95292678 0.21145682 0.29024840
[19] 0.56687717 0.39737653
> (Ppois    <- ppois    (Rpois, lambda = 12) )
 [1] 0.5759652 0.9625835 0.7720245 0.6815356 0.6815356 0.9370337 0.8444157
 [8] 0.7720245 0.7720245 0.6815356 0.4615973 0.7720245 0.6815356 0.0895045
[15] 0.5759652 0.2423922 0.9787202 0.1550278 0.2423922 0.5759652
> (Psignrank<- psignrank(Rsignrank, n = 47) )
 [1] 0.73035760 0.08606440 0.77989459 0.26617771 0.43546539 0.06487437
 [7] 0.98523166 0.17342496 0.29813133 0.56453461 0.06763111 0.56040353
[13] 0.91723989 0.56453461 0.94164286 0.70550234 0.04684660 0.28371887
[19] 0.47284085 0.95722393
> (Pt       <- pt       (Rt, df = 11) )
 [1] 0.1003598 0.8371173 0.6833399 0.7012404 0.9124974 0.4430160 0.1098305
 [8] 0.9883114 0.3279083 0.9436663 0.3770483 0.5902000 0.0813075 0.9123797
[15] 0.2414853 0.3060631 0.9336005 0.1528788 0.5733311 0.4651830
> (Punif    <- punif    (Runif, min = .2, max = 2) )
 [1] 0.15665940 0.37175748 0.84487835 0.37640433 0.93784393 0.74275383
 [7] 0.18788856 0.67576953 0.56766041 0.66344162 0.72670684 0.13119588
[13] 0.73911699 0.68084475 0.08977497 0.53121238 0.23960943 0.32947087
[19] 0.13172500 0.46158200
> (Pweibull <- pweibull (Rweibull, shape = 3, scale = 2) )
 [1] 0.88130587 0.72427513 0.15268567 0.08799060 0.84982895 0.73102092
 [7] 0.83065487 0.24331474 0.95899214 0.46815713 0.89699504 0.52211855
[13] 0.00955858 0.71390432 0.35513825 0.35607432 0.38274711 0.27680363
[19] 0.50303978 0.15051213
> (Pwilcox  <- pwilcox  (Rwilcox, m = 13, n = 17) )
 [1] 0.91512368 0.50000000 0.41837770 0.50000000 0.34003726 0.93864177
 [7] 0.75871780 0.34003726 0.20414269 0.05162954 0.15016291 0.32502911
[13] 0.88566977 0.70415727 0.96423159 0.56545850 0.01108041 0.50000000
[19] 0.15016291 0.43454150
> 
> dbeta    (Rbeta, shape1 = .8, shape2 = 2)
 [1] 5.7913365 2.2364651 0.3059074 1.9511551 1.4556855 1.8746068 0.2575917
 [8] 2.6997454 1.4548665 2.6765264 1.0928822 1.1350760 1.3109191 0.6368984
[15] 1.6508280 1.9374717 2.2740086 2.7988135 1.1324661 0.9756421
> dbinom   (Rbinom, size = 55, prob = .25)
 [1] 0.11145170 0.12232504 0.12232504 0.09287642 0.01946560 0.02493975
 [7] 0.01246987 0.11145170 0.09287642 0.11094596 0.01946560 0.11145170
[13] 0.07102314 0.01246987 0.01246987 0.09287642 0.12232504 0.11145170
[19] 0.03244267 0.04341364
> dcauchy  (Rcauchy, location = 12, scale = 2)
 [1] 0.001274152 0.148326009 0.023524757 0.157411041 0.073667654 0.100055114
 [7] 0.148329389 0.133504054 0.148433568 0.159134039 0.157686757 0.150433150
[13] 0.159072180 0.121390049 0.062607155 0.130593337 0.124570555 0.052153921
[19] 0.030572357 0.138035910
> dchisq   (Rchisq, df = 3)
 [1] 0.10087621 0.19475936 0.01759333 0.23601129 0.08574365 0.23802581
 [7] 0.20123372 0.18580144 0.23657215 0.15852893 0.12265734 0.22552069
[13] 0.07578172 0.02705295 0.05562044 0.07345850 0.23198007 0.24044408
[19] 0.12820355 0.22364083
> dexp     (Rexp, rate = 2)
 [1] 1.72716241 0.02773472 0.14057897 1.59236400 1.71492696 0.12542210
 [7] 0.65772563 0.99684330 0.46878331 0.43660735 0.70927528 0.30277010
[13] 1.59283360 0.53687987 1.11347921 1.81270585 1.37448911 0.43019428
[19] 0.26048939 0.01635668
> df       (Rf, df1 = 12, df2 = 6)
 [1] 0.519937867 0.004371848 0.692823649 0.167468952 0.448061444 0.022237248
 [7] 0.580744146 0.412297607 0.645723076 0.343445106 0.377992320 0.450116704
[13] 0.682397435 0.666844216 0.147593859 0.066212131 0.431848359 0.243311742
[19] 0.680166477 0.051540741
> dgamma   (Rgamma, shape = 2, scale = 5)
 [1] 0.071548510 0.011482464 0.045859471 0.048056741 0.073342809 0.031205091
 [7] 0.030090422 0.017225367 0.057283478 0.002759218 0.073295320 0.067639298
[13] 0.007261834 0.073497725 0.031591526 0.034466522 0.046858733 0.060624349
[19] 0.064405338 0.031640760
> dgeom    (Rgeom, prob = .25)
 [1] 0.105468750 0.187500000 0.079101562 0.250000000 0.025028229 0.250000000
 [7] 0.250000000 0.187500000 0.250000000 0.001409428 0.250000000 0.079101562
[13] 0.187500000 0.140625000 0.187500000 0.250000000 0.140625000 0.250000000
[19] 0.140625000 0.140625000
> dhyper   (Rhyper, m = 40, n = 30, k = 20)
 [1] 0.201992244 0.204313994 0.041089357 0.201992244 0.085120478 0.151325293
 [7] 0.092270836 0.204313994 0.201992244 0.201992244 0.003448058 0.204313994
[13] 0.157321776 0.204313994 0.151325293 0.092270836 0.201992244 0.204313994
[19] 0.201992244 0.085120478
> dlnorm   (Rlnorm, meanlog = -1, sdlog = 3)
 [1] 2.668606e+00 1.683451e+00 7.193164e-01 5.321346e+00 6.170446e-01
 [6] 1.494123e-04 1.720448e+00 2.343432e-01 1.342632e+01 1.483106e+00
[11] 5.929818e-01 7.512774e-01 5.299802e-02 3.193275e-04 3.317380e-02
[16] 6.087639e-02 2.153230e-02 2.062527e+01 4.042023e-01 3.018308e-01
> dlogis   (Rlogis, location = 12, scale = 2)
 [1] 0.124986527 0.085378232 0.029201090 0.009215688 0.117883415 0.122108387
 [7] 0.068316444 0.093931776 0.022039879 0.014089159 0.057342527 0.120806197
[13] 0.124791900 0.120761445 0.041440324 0.061589581 0.026676922 0.124025089
[19] 0.118191176 0.085373362
> dnbinom  (Rnbinom, size = 7, prob = .01)
 [1] 0.0005756421 0.0015130212 0.0015767076 0.0005134297 0.0015767076
 [6] 0.0015461270 0.0014240958 0.0016111183 0.0004916298 0.0010965512
[11] 0.0015593115 0.0009750548 0.0006438980 0.0010814585 0.0008880238
[16] 0.0004914120 0.0016079010 0.0015162429 0.0009432177 0.0003394350
> dnorm    (Rnorm, mean = -1, sd = 3)
 [1] 0.11645131 0.13054810 0.07428112 0.01879959 0.07174577 0.07853590
 [7] 0.12445810 0.06272170 0.12001845 0.08959330 0.13186348 0.07126843
[13] 0.06736890 0.12130968 0.09218225 0.03275978 0.09645747 0.11414715
[19] 0.13110785 0.12855632
> dpois    (Rpois, lambda = 12)
 [1] 0.11436792 0.02554981 0.09048890 0.10557038 0.10557038 0.03832471
 [7] 0.07239112 0.09048890 0.09048890 0.10557038 0.11436792 0.09048890
[13] 0.10557038 0.04368219 0.11436792 0.08736438 0.01613672 0.06552328
[19] 0.08736438 0.11436792
> dsignrank(Rsignrank, n = 47)
 [1] 0.0034867066 0.0016640407 0.0031343819 0.0034424340 0.0041241797
 [6] 0.0013458856 0.0004151749 0.0026958774 0.0036336738 0.0041310778
[11] 0.0013892547 0.0041375412 0.0016402485 0.0041310778 0.0012613848
[16] 0.0036336738 0.0010451063 0.0035512743 0.0041704554 0.0009903593
> dt       (Rt, df = 11)
 [1] 0.15327674 0.22478336 0.34248554 0.33262930 0.13657377 0.38544372
 [7] 0.16511969 0.02085839 0.34818896 0.09286525 0.36874919 0.37858245
[13] 0.12825909 0.13672995 0.29449489 0.33676702 0.10750499 0.21435914
[19] 0.38245649 0.38829368
> dunif    (Runif, min = .2, max = 2)
 [1] 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556
 [8] 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556
[15] 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556 0.5555556
> dweibull (Rweibull, shape = 3, scale = 2)
 [1] 0.29485197 0.48969256 0.38340291 0.27900543 0.34506430 0.48381546
 [7] 0.37250264 0.48440643 0.13340770 0.58714804 0.26710349 0.58560259
[13] 0.06712819 0.49835639 0.55849041 0.55891005 0.56955869 0.51181231
[19] 0.58726293 0.38041367
> dwilcox  (Rwilcox, m = 13, n = 17)
 [1] 0.006785705 0.016431951 0.016031266 0.016431951 0.015008152 0.005355660
 [7] 0.013124724 0.015008152 0.011603922 0.004396398 0.009570520 0.014737869
[13] 0.008348499 0.014448507 0.003546639 0.016270528 0.001246954 0.016431951
[19] 0.009570520 0.016163798
> 
> ## Check q*(p*(.)) = identity
> All.eq(Rbeta,     qbeta    (Pbeta, shape1 = .8, shape2 = 2))
[1] TRUE
> All.eq(Rbinom,    qbinom   (Pbinom, size = 55, prob = .25))
[1] TRUE
> All.eq(Rcauchy,   qcauchy  (Pcauchy, location = 12, scale = 2))
[1] TRUE
> All.eq(Rchisq,    qchisq   (Pchisq, df = 3))
[1] TRUE
> All.eq(Rexp,      qexp     (Pexp, rate = 2))
[1] TRUE
> All.eq(Rf,        qf       (Pf, df1 = 12, df2 = 6))
[1] TRUE
> All.eq(Rgamma,    qgamma   (Pgamma, shape = 2, scale = 5))
[1] TRUE
> All.eq(Rgeom,     qgeom    (Pgeom, prob = .25))
[1] TRUE
> All.eq(Rhyper,    qhyper   (Phyper, m = 40, n = 30, k = 20))
[1] TRUE
> All.eq(Rlnorm,    qlnorm   (Plnorm, meanlog = -1, sdlog = 3))
[1] TRUE
> All.eq(Rlogis,    qlogis   (Plogis, location = 12, scale = 2))
[1] TRUE
> All.eq(Rnbinom,   qnbinom  (Pnbinom, size = 7, prob = .01))
[1] TRUE
> All.eq(Rnorm,     qnorm    (Pnorm, mean = -1, sd = 3))
[1] TRUE
> All.eq(Rpois,     qpois    (Ppois, lambda = 12))
[1] TRUE
> All.eq(Rsignrank, qsignrank(Psignrank, n = 47))
[1] TRUE
> all.equal(Rt,        qt       (Pt, df = 11), tol = 1e-7 )## << !!
[1] TRUE
> All.eq(Runif,     qunif    (Punif, min = .2, max = 2))
[1] TRUE
> All.eq(Rweibull,  qweibull (Pweibull, shape = 3, scale = 2))
[1] TRUE
> All.eq(Rwilcox,   qwilcox  (Pwilcox, m = 13, n = 17))
[1] TRUE
> 
> ## Same with "upper tail":
> All.eq(Rbeta,     qbeta    (1- Pbeta, shape1 = .8, shape2 = 2, lower=F))
[1] TRUE
> All.eq(Rbinom,    qbinom   (1- Pbinom, size = 55, prob = .25, lower=F))
[1] TRUE
> All.eq(Rcauchy,   qcauchy  (1- Pcauchy, location = 12, scale = 2, lower=F))
[1] TRUE
> All.eq(Rchisq,    qchisq   (1- Pchisq, df = 3, lower=F))
[1] TRUE
> All.eq(Rexp,      qexp     (1- Pexp, rate = 2, lower=F))
[1] TRUE
> All.eq(Rf,        qf       (1- Pf, df1 = 12, df2 = 6, lower=F))
[1] TRUE
> All.eq(Rgamma,    qgamma   (1- Pgamma, shape = 2, scale = 5, lower=F))
[1] TRUE
> All.eq(Rgeom,     qgeom    (1- Pgeom, prob = .25, lower=F))
[1] TRUE
> All.eq(Rhyper,    qhyper   (1- Phyper, m = 40, n = 30, k = 20, lower=F))
[1] TRUE
> All.eq(Rlnorm,    qlnorm   (1- Plnorm, meanlog = -1, sdlog = 3, lower=F))
[1] TRUE
> All.eq(Rlogis,    qlogis   (1- Plogis, location = 12, scale = 2, lower=F))
[1] TRUE
> All.eq(Rnbinom,   qnbinom  (1- Pnbinom, size = 7, prob = .01, lower=F))
[1] TRUE
> All.eq(Rnorm,     qnorm    (1- Pnorm, mean = -1, sd = 3,lower=F))
[1] TRUE
> All.eq(Rpois,     qpois    (1- Ppois, lambda = 12, lower=F))
[1] TRUE
> All.eq(Rsignrank, qsignrank(1- Psignrank, n = 47, lower=F))
[1] TRUE
> all.equal(Rt,        qt       (1- Pt, df = 11, lower=F), tol = 1e-7)
[1] TRUE
> All.eq(Runif,     qunif    (1- Punif, min = .2, max = 2, lower=F))
[1] TRUE
> All.eq(Rweibull,  qweibull (1- Pweibull, shape = 3, scale = 2, lower=F))
[1] TRUE
> All.eq(Rwilcox,   qwilcox  (1- Pwilcox, m = 13, n = 17, lower=F))
[1] TRUE
> 
> ### Check q*(p* ( log ), log) = identity
> All.eq(Rbeta,     qbeta    (log(Pbeta), shape1 = .8, shape2 = 2, log=TRUE))
[1] TRUE
> All.eq(Rbinom,    qbinom   (log(Pbinom), size = 55, prob = .25, log=TRUE))
[1] TRUE
> All.eq(Rcauchy,   qcauchy  (log(Pcauchy), location = 12, scale = 2, log=TRUE))
[1] TRUE
> all.equal(Rchisq,    qchisq   (log(Pchisq), df = 3, log=TRUE),tol=1e-14)
[1] TRUE
> All.eq(Rexp,      qexp     (log(Pexp), rate = 2, log=TRUE))
[1] TRUE
> All.eq(Rf,        qf       (log(Pf), df1= 12, df2= 6, log=TRUE))
[1] TRUE
> All.eq(Rgamma,    qgamma   (log(Pgamma), shape = 2, scale = 5, log=TRUE))
[1] TRUE
> All.eq(Rgeom,     qgeom    (log(Pgeom), prob = .25, log=TRUE))
[1] TRUE
> All.eq(Rhyper,    qhyper   (log(Phyper), m = 40, n = 30, k = 20, log=TRUE))
[1] TRUE
> All.eq(Rlnorm,    qlnorm   (log(Plnorm), meanlog = -1, sdlog = 3, log=TRUE))
[1] TRUE
> All.eq(Rlogis,    qlogis   (log(Plogis), location = 12, scale = 2, log=TRUE))
[1] TRUE
> All.eq(Rnbinom,   qnbinom  (log(Pnbinom), size = 7, prob = .01, log=TRUE))
[1] TRUE
> All.eq(Rnorm,     qnorm    (log(Pnorm), mean = -1, sd = 3, log=TRUE))
[1] TRUE
> All.eq(Rpois,     qpois    (log(Ppois), lambda = 12, log=TRUE))
[1] TRUE
> All.eq(Rsignrank, qsignrank(log(Psignrank), n = 47, log=TRUE))
[1] TRUE
> all.equal(Rt,        qt       (log(Pt), df = 11, log=TRUE), tol = 1e-7)
[1] TRUE
> All.eq(Runif,     qunif    (log(Punif), min = .2, max = 2, log=TRUE))
[1] TRUE
> All.eq(Rweibull,  qweibull (log(Pweibull), shape = 3, scale = 2, log=TRUE))
[1] TRUE
> All.eq(Rwilcox,   qwilcox  (log(Pwilcox), m = 13, n = 17, log=TRUE))
[1] TRUE
> 
> 
> ## Check log( upper.tail ):
> All.eq(log(1 - Pbeta),     pbeta    (Rbeta, shape1 = .8, shape2 = 2, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pbinom),    pbinom   (Rbinom, size = 55, prob = .25, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pcauchy),   pcauchy  (Rcauchy, location = 12, scale = 2, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pchisq),    pchisq   (Rchisq, df = 3, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pexp),      pexp     (Rexp, rate = 2, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pf),        pf       (Rf, df1 = 12, df2 = 6, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pgamma),    pgamma   (Rgamma, shape = 2, scale = 5, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pgeom),     pgeom    (Rgeom, prob = .25, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Phyper),    phyper   (Rhyper, m = 40, n = 30, k = 20, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Plnorm),    plnorm   (Rlnorm, meanlog = -1, sdlog = 3, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Plogis),    plogis   (Rlogis, location = 12, scale = 2, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pnbinom),   pnbinom  (Rnbinom, size = 7, prob = .01, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pnorm),     pnorm    (Rnorm, mean = -1, sd = 3, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Ppois),     ppois    (Rpois, lambda = 12, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Psignrank), psignrank(Rsignrank, n = 47, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pt),        pt       (Rt, df = 11, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Punif),     punif    (Runif, min = .2, max = 2, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pweibull),  pweibull (Rweibull, shape = 3, scale = 2, lower=F, log=T))
[1] TRUE
> All.eq(log(1 - Pwilcox),   pwilcox  (Rwilcox, m = 13, n = 17, lower=F, log=T))
[1] TRUE
> 
